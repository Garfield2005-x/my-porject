"use client";
import { useCart } from "../ClientWrapper"; // ‡πÉ‡∏ä‡πâ import ‡∏à‡∏≤‡∏Å ClientWrapper
import { useState } from "react";
import { QRCodeCanvas } from "qrcode.react";
import { useRouter } from "next/navigation";
import generatePayload from "promptpay-qr";

export default function CheckoutPage() {
  const { cartItems, removeFromCart, clearCart } = useCart();
  const [slipFile, setSlipFile] = useState(null);
  const [isPaymentComplete, setIsPaymentComplete] = useState(false);
  const router = useRouter();

  const promptPayNumber = "0656206808"; // ‡πÄ‡∏ö‡∏≠‡∏£‡πå PromptPay

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°
  const totalPrice = cartItems.reduce((sum, item) => sum + item.price, 0);

  // ‡πÉ‡∏ä‡πâ promptpay-qr ‡∏™‡∏£‡πâ‡∏≤‡∏á payload ‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
  const promptPayQR = generatePayload(promptPayNumber, { amount: totalPrice });

  const handleSlipUpload = (event) => {
    const file = event.target.files[0];
    if (file) {
      setSlipFile(file);
    }
  };

  const handlePayment = async () => {
    if (!slipFile) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô");
      return;
    }

    const formData = new FormData();
    formData.append("email", "boxx3345@gmail.com"); // ‡πÉ‡∏™‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    formData.append("slip", slipFile);
    formData.append("items", JSON.stringify(cartItems));

    try {
      const res = await fetch("/api/send-email", {
        method: "POST",
        body: formData,
      });

      if (res.ok) {
        alert("üìß ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß!");
      } else {
        alert("‚ùå ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      }
    } catch (err) {
      console.error(err);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•");
    }

    clearCart();
    setIsPaymentComplete(true);
    router.push("/");
  };

  return (
    <div>
      <h1>‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h1>
      {cartItems.length > 0 ? (
        <>
          <ul>
            {cartItems.map((item, index) => (
              <li key={index}>
                {item.name} - {item.price}‡∏ø
                <button onClick={() => removeFromCart(index)}>‡∏•‡∏ö</button>
              </li>
            ))}
          </ul>
          <h3>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°: {totalPrice.toFixed(2)}‡∏ø</h3>
          <QRCodeCanvas value={promptPayQR} size={200} />
          <p>‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô PromptPay</p>
          <input type="file" onChange={handleSlipUpload} />
          {slipFile && <p>‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå: {slipFile.name}</p>}
          {!isPaymentComplete && (
            <button onClick={handlePayment} disabled={!slipFile}>
              ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô
            </button>
          )}
          {isPaymentComplete && <p>‚úÖ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤.</p>}
        </>
      ) : (
        <p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤</p>
      )}
    </div>
  );
}
